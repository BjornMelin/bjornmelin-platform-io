name: CodeArtifact Backup

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version to backup (leave empty for current)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  CODEARTIFACT_DOMAIN: bjornmelin-platform
  CODEARTIFACT_REPOSITORY: platform-releases
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  backup-to-codeartifact:
    name: Backup to CodeArtifact
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCodeArtifact
          role-session-name: GitHubActions-CodeArtifact-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get CodeArtifact authorization token
        id: codeartifact
        run: |
          echo "Fetching CodeArtifact authorization token..."
          CODEARTIFACT_TOKEN=$(aws codeartifact get-authorization-token \
            --domain ${{ env.CODEARTIFACT_DOMAIN }} \
            --query authorizationToken \
            --output text)
          echo "::add-mask::$CODEARTIFACT_TOKEN"
          echo "token=$CODEARTIFACT_TOKEN" >> $GITHUB_OUTPUT
          echo "Authorization token obtained successfully"

      - name: Configure npm for CodeArtifact
        run: |
          echo "Configuring npm registry for CodeArtifact..."
          
          # Get repository endpoint
          REPO_ENDPOINT=$(aws codeartifact get-repository-endpoint \
            --domain ${{ env.CODEARTIFACT_DOMAIN }} \
            --repository ${{ env.CODEARTIFACT_REPOSITORY }} \
            --format npm \
            --query repositoryEndpoint \
            --output text)
          
          echo "Repository endpoint: $REPO_ENDPOINT"
          
          # Configure npm
          npm config set registry $REPO_ENDPOINT
          npm config set ${REPO_ENDPOINT/https:\/\//}//:_authToken=${{ steps.codeartifact.outputs.token }}
          
          # Save endpoint for later use
          echo "REPO_ENDPOINT=$REPO_ENDPOINT" >> $GITHUB_ENV

      - name: Prepare package for publishing
        run: |
          # Update package version if specified
          if [ -n "${{ inputs.package_version }}" ]; then
            echo "Setting package version to ${{ inputs.package_version }}"
            npm version ${{ inputs.package_version }} --no-git-tag-version
          fi
          
          # Get current package info
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          
          # Add publishConfig to package.json
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.publishConfig = {
              registry: '${{ env.REPO_ENDPOINT }}',
              access: 'public'
            };
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Publish to CodeArtifact
        id: publish
        run: |
          echo "Publishing package to CodeArtifact..."
          
          # Create .npmrc file for authentication
          echo "${REPO_ENDPOINT/https:\/\//}//:_authToken=${{ steps.codeartifact.outputs.token }}" > .npmrc
          echo "registry=${{ env.REPO_ENDPOINT }}" >> .npmrc
          
          # Publish the package
          npm publish --access public 2>&1 | tee publish.log
          
          # Check if already published
          if grep -q "You cannot publish over the previously published versions" publish.log; then
            echo "Package version already exists in CodeArtifact"
            echo "already_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Package published successfully"
            echo "already_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify package in CodeArtifact
        if: steps.publish.outputs.already_exists != 'true'
        run: |
          echo "Verifying package in CodeArtifact..."
          
          # Wait a moment for the package to be indexed
          sleep 5
          
          # Verify the package exists
          aws codeartifact describe-package-version \
            --domain ${{ env.CODEARTIFACT_DOMAIN }} \
            --repository ${{ env.CODEARTIFACT_REPOSITORY }} \
            --format npm \
            --package ${{ env.PACKAGE_NAME }} \
            --package-version ${{ env.PACKAGE_VERSION }} \
            --output json | jq '.'

      - name: List package versions
        if: always()
        run: |
          echo "Listing all versions of ${{ env.PACKAGE_NAME }} in CodeArtifact:"
          
          aws codeartifact list-package-versions \
            --domain ${{ env.CODEARTIFACT_DOMAIN }} \
            --repository ${{ env.CODEARTIFACT_REPOSITORY }} \
            --format npm \
            --package ${{ env.PACKAGE_NAME }} \
            --output table \
            --query 'versions[].{Version:version,Status:status,Origin:origin.domainEntryPoint.repositoryName}'

      - name: Create backup summary
        if: always()
        run: |
          cat << EOF > backup-summary.txt
          CodeArtifact Backup Summary
          ==========================
          
          Package: ${{ env.PACKAGE_NAME }}@${{ env.PACKAGE_VERSION }}
          Domain: ${{ env.CODEARTIFACT_DOMAIN }}
          Repository: ${{ env.CODEARTIFACT_REPOSITORY }}
          Region: ${{ env.AWS_REGION }}
          
          Status: ${{ steps.publish.outputs.already_exists == 'true' && 'Already Exists' || 'Published Successfully' }}
          Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          GitHub Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF
          
          cat backup-summary.txt

      - name: Upload backup summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeartifact-backup-summary
          path: backup-summary.txt
          retention-days: 30

      - name: Clean up
        if: always()
        run: |
          # Remove sensitive files
          rm -f .npmrc publish.log
          
          # Clear npm config
          npm config delete registry
          npm config delete //:_authToken