name: Deploy Portfolio

on:
  push:
    branches:
      - main
    paths-ignore:
      - "infrastructure/**"
      - "**.md"
  workflow_dispatch:
  workflow_run:
    workflows: ["E2E Tests"]
    types:
      - completed
    branches:
      - main

concurrency:
  group: "deploy"
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1

jobs:
  # Run tests before deployment
  test:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.test-result.outputs.passed }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          install: "true"

      - name: Run unit tests
        id: run-tests
        run: pnpm test
        continue-on-error: true

      - name: Set test result
        id: test-result
        run: |
          if [ "${{ steps.run-tests.outcome }}" == "success" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  deploy:
    needs: test
    if: needs.test.outputs.tests-passed == 'true'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          install: "true"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          role-session-name: github-actions-deploy
          aws-region: ${{ env.AWS_REGION }}

      # Build the Next.js app & export static files
      - name: Build Next.js App (Static Export)
        env:
          NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
        run: pnpm build

      # Retrieve the S3 bucket name and CloudFront distribution from your CF stack
      - name: Get Stack Outputs
        id: stack-outputs
        continue-on-error: true
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name prod-portfolio-storage \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteBucketName`].OutputValue' \
            --output text --region ${{ env.AWS_REGION }})

          DIST_ID=$(aws cloudformation describe-stacks \
            --stack-name prod-portfolio-storage \
            --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
            --output text --region ${{ env.AWS_REGION }})

          echo "bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "distribution=$DIST_ID" >> $GITHUB_OUTPUT

      - name: Check if Stack Outputs were retrieved
        if: steps.stack-outputs.outcome != 'success'
        run: |
          echo "Failed to retrieve stack outputs. Check your user permissions and make sure 'prod-portfolio-storage' stack exists."
          exit 1

      # Upload the exported static files to your S3 bucket
      - name: Upload to S3
        run: |
          echo "Uploading static files to s3://${{ steps.stack-outputs.outputs.bucket }}"
          aws s3 sync out/ s3://${{ steps.stack-outputs.outputs.bucket }} --delete

      # Invalidate CloudFront cache so your changes go live
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.stack-outputs.outputs.distribution }} \
            --paths "/*"

  smoke-check:
    name: Post-Deploy Smoke Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'

    steps:
      - name: Run smoke check
        id: smoke
        run: |
          set +e
          url="https://bjornmelin.io"
          http_code=$(curl --retry 3 --retry-delay 5 --max-time 15 -s -o /tmp/response "$url" -w "%{http_code}")
          exit_code=$?

          echo "http_code=$http_code" >> "$GITHUB_OUTPUT"
          echo "exit_code=$exit_code" >> "$GITHUB_OUTPUT"

          if [ "$exit_code" -eq 0 ] && [ "$http_code" -ge 200 ] && [ "$http_code" -lt 400 ]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            echo "Smoke check failed for $url (exit: $exit_code, status: $http_code)."
            echo "----- Response Body (truncated) -----"
            head -c 2048 /tmp/response || true
          fi

      - name: Deployment summary
        if: always()
        run: |
          status="${{ steps.smoke.outputs.status }}"
          http_code="${{ steps.smoke.outputs.http_code }}"
          [ -z "$http_code" ] && http_code="n/a"
          {
            echo "## Deployment Summary"
            echo ""
            echo "- Commit: \`$GITHUB_SHA\`"
            echo "- Workflow Run: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo "- Smoke Check Status: ${status:-unknown}"
            echo "- HTTP Status Code: ${http_code}"
            echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Notify on commit
        if: always()
        uses: actions/github-script@v8
        with:
          script: |
            const statusRaw = '${{ steps.smoke.outputs.status }}';
            const httpRaw = '${{ steps.smoke.outputs.http_code }}';
            const status = statusRaw || 'unknown';
            const httpCode = httpRaw || 'n/a';
            const url = 'https://bjornmelin.io';
            const lines = [
              `Deployment smoke check ${status === 'success' ? 'succeeded' : 'failed'} for ${url}.`,
              `HTTP status: ${httpCode}.`,
              `Workflow run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            ];
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: lines.join('\n')
            });

      - name: Fail when smoke check failed
        if: ${{ steps.smoke.outputs.status == 'failure' }}
        run: |
          echo "Smoke check did not succeed. Failing workflow."
          exit 1
