name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run tests with debug logs'
        required: false
        default: false

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm (action)
        uses: pnpm/action-setup@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          install: "true"

      - name: Detect E2E tests presence
        id: detect
        run: |
          set -euo pipefail
          if [ -n "${{ hashFiles('e2e/**','tests/e2e/**','playwright/tests/**') }}" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

      - name: Build application
        if: steps.detect.outputs.present == 'true'
        run: pnpm build
        env:
          NEXT_PUBLIC_BASE_URL: http://localhost:3000
          NEXT_PUBLIC_API_URL: http://localhost:3000/api

      - name: Run E2E tests
        if: steps.detect.outputs.present == 'true'
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          NEXT_PUBLIC_BASE_URL: http://localhost:3000
          NEXT_PUBLIC_API_URL: http://localhost:3000/api
          DEBUG: ${{ github.event.inputs.debug_enabled == 'true' && 'pw:api' || '' }}

      - name: Upload test report
        uses: actions/upload-artifact@v5
        if: always() && steps.detect.outputs.present == 'true'
        with:
          name: playwright-report-${{ github.sha }}
          path: playwright-report/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v5
        if: failure() && steps.detect.outputs.present == 'true'
        with:
          name: test-results-${{ github.sha }}
          path: test-results/
          retention-days: 7

      - name: Comment PR with results
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request' && steps.detect.outputs.present == 'true' && always() && github.event.pull_request.head.repo.fork == false
        env:
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results if available
            let testResults = '✅ All E2E tests passed!';
            let details = '';
            const jobStatus = process.env.JOB_STATUS;
            
            if (jobStatus === 'failure') {
              testResults = '❌ E2E tests failed';
              details = '\n\nPlease check the [test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.';
            }
            
            const comment = `## E2E Test Results
            
            ${testResults}${details}
            
            **Commit:** ${{ github.sha }}
            **Workflow:** [Run #${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (err) {
              core.warning(`Skipping PR comment: ${err?.message ?? err}`);
            }

  # Run unit tests in parallel
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm (action)
        uses: pnpm/action-setup@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          install: "true"

      - name: Run unit tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/
          retention-days: 7

      - name: Coverage summary
        if: github.event_name == 'pull_request' && always() && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const formatPercentage = (num) => `${num.toFixed(2)}%`;
            const comment = `## Test Coverage Report
            
            | Type | Coverage |
            |------|----------|
            | Statements | ${formatPercentage(coverage.total.statements.pct)} |
            | Branches | ${formatPercentage(coverage.total.branches.pct)} |
            | Functions | ${formatPercentage(coverage.total.functions.pct)} |
            | Lines | ${formatPercentage(coverage.total.lines.pct)} |
            
            **Target:** 90% coverage
            `;
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (err) {
              core.warning(`Skipping coverage PR comment: ${err?.message ?? err}`);
            }
      # E2E detection runs in e2e-tests job
